Compreendido! Abaixo está a estrutura SOLICITADA, com todos os principais arquivos do sistema bancário digital, seguindo as melhores práticas, padrões enterprise e todos requisitos mencionados.

---

---

#### **`pom.xml`**

```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.banco</groupId>
    <artifactId>banco-digital</artifactId>
    <version>1.0.0</version>
    <name>Banco Digital API</name>
    <description>Sistema bancário digital</description>
    <properties>
        <java.version>17</java.version>
        <spring.boot.version>3.2.6</spring.boot.version>
    </properties>

    <dependencies>
        <!-- Core Spring Boot -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-amqp</artifactId>
        </dependency>

        <!-- JWT -->
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-api</artifactId>
            <version>0.12.3</version>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-impl</artifactId>
            <version>0.12.3</version>
            <scope>runtime</scope>
        </dependency>
        <dependency>
            <groupId>io.jsonwebtoken</groupId>
            <artifactId>jjwt-jackson</artifactId>
            <version>0.12.3</version>
            <scope>runtime</scope>
        </dependency>

        <!-- Lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- Database Oracle -->
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc8</artifactId>
            <version>21.7.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-core</artifactId>
        </dependency>

        <!-- Swagger / OpenAPI -->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
            <version>2.5.0</version>
        </dependency>

        <!-- Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
```

---

---

#### **`src/main/resources/application.yml`**

```yaml
spring:
  datasource:
    url: jdbc:oracle:thin:@//localhost:1521/XEPDB1
    username: bancouser
    password: bancopass
    driver-class-name: oracle.jdbc.OracleDriver
  jpa:
    hibernate:
      ddl-auto: update
    database-platform: org.hibernate.dialect.Oracle12cDialect
    properties:
      hibernate:
        format_sql: true
    show-sql: true

  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest

server:
  port: 8080

security:
  jwt:
    issuer: banco-digital
    secret: MINHA_CHAVE_SECRETA_JWT_123456789
    expiration: 3600000 # 1h

logging:
  level:
    root: INFO
    com.banco: DEBUG

springdoc:
  api-docs:
    enabled: true
  swagger-ui:
    enabled: true
```

---

---

#### **`Dockerfile`**

```dockerfile
FROM eclipse-temurin:17-jdk-alpine
ARG JAR_FILE=target/banco-digital-1.0.0.jar
COPY ${JAR_FILE} app.jar
EXPOSE 8080
ENTRYPOINT ["java","-jar","/app.jar"]
```

---

---

## `src/main/java/com/banco/digital/BancoDigitalApplication.java`
```java
package com.banco.digital;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class BancoDigitalApplication {
    public static void main(String[] args) {
        SpringApplication.run(BancoDigitalApplication.class, args);
    }
}
```

---

---

## CONFIGURAÇÕES

### `src/main/java/com/banco/digital/config/SecurityConfig.java`
```java
package com.banco.digital.config;

import com.banco.digital.security.JwtAuthenticationFilter;
import com.banco.digital.security.UserDetailsServiceImpl;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;

@Configuration
@EnableMethodSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    private final UserDetailsServiceImpl userDetailsService;

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable())
            .sessionManagement(sess -> sess.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(auth -> auth
                .requestMatchers(
                    "/swagger-ui/**",
                    "/v3/api-docs/**",
                    "/api/auth/**",
                    "/api/cliente/cadastro").permitAll()
                .anyRequest().authenticated()
            );

        http.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
```

---

### `src/main/java/com/banco/digital/config/RabbitConfig.java`
```java
package com.banco.digital.config;

import org.springframework.amqp.core.*;
import org.springframework.amqp.rabbit.connection.ConnectionFactory;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.*;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class RabbitConfig {
    public static final String CLIENTE_QUEUE = "cliente.novo";
    public static final String CLIENTE_EXCHANGE = "cliente.exchange";
    public static final String CLIENTE_ROUTING_KEY = "cliente.cadastro";

    @Bean
    public Queue clienteQueue() {
        return new Queue(CLIENTE_QUEUE, true);
    }

    @Bean
    public TopicExchange clienteExchange() {
        return new TopicExchange(CLIENTE_EXCHANGE);
    }

    @Bean
    public Binding binding() {
        return BindingBuilder.bind(clienteQueue()).to(clienteExchange()).with(CLIENTE_ROUTING_KEY);
    }

    @Bean
    public MessageConverter jsonMessageConverter() {
        return new Jackson2JsonMessageConverter();
    }

    @Bean
    public RabbitTemplate rabbitTemplate(final ConnectionFactory cf) {
        RabbitTemplate template = new RabbitTemplate(cf);
        template.setMessageConverter(jsonMessageConverter());
        return template;
    }
}
```

---

### `src/main/java/com/banco/digital/config/SwaggerConfig.java`
```java
package com.banco.digital.config;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class SwaggerConfig {
    @Bean
    public OpenAPI customOpenAPI() {
        return new OpenAPI().info(
            new Info().title("Banco Digital API")
                      .version("1.0.0")
                      .description("Documentação do sistema bancário digital.")
        );
    }
}
```

---

---

## ENTIDADES

### `src/main/java/com/banco/digital/entity/Cliente.java`
```java
package com.banco.digital.entity;

import com.banco.digital.enums.StatusCliente;
import jakarta.persistence.*;
import lombok.*;

import java.time.LocalDate;

@Entity
@Table(name = "clientes")
@Getter @Setter @Builder
@NoArgsConstructor @AllArgsConstructor
public class Cliente {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable=false, length=100)
    private String nome;

    @Column(nullable=false, unique=true, length=14)
    private String cpf;

    @Column(nullable=false, unique=true, length=80)
    private String email;

    @Column(nullable=false, length=20)
    private String telefone;

    @Column(nullable=false)
    private String endereco;

    @Column(nullable=false)
    private LocalDate dataNascimento;

    @Enumerated(EnumType.STRING)
    @Column(nullable=false, length=10)
    private StatusCliente status;

    @OneToOne(mappedBy = "cliente", cascade = CascadeType.ALL)
    private Conta conta;
}
```

---

### `src/main/java/com/banco/digital/entity/Gerente.java`
```java
package com.banco.digital.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "gerentes")
@Getter @Setter @Builder
@NoArgsConstructor @AllArgsConstructor
public class Gerente {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable=false, unique=true, length=50)
    private String login;

    @Column(nullable=false, length=100)
    private String senha;
}
```

---

### `src/main/java/com/banco/digital/entity/Conta.java`
```java
package com.banco.digital.entity;

import jakarta.persistence.*;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "contas")
@Getter @Setter @Builder
@NoArgsConstructor @AllArgsConstructor
public class Conta {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @OneToOne
    @JoinColumn(name = "cliente_id", referencedColumnName = "id", unique = true)
    private Cliente cliente;

    @Column(nullable=false)
    private BigDecimal saldo;

    @Column(nullable=false)
    private LocalDateTime dataCriacao;

    @OneToMany(mappedBy = "conta", cascade = CascadeType.ALL)
    private List<Emprestimo> emprestimos;
}
```

---

### `src/main/java/com/banco/digital/entity/Emprestimo.java`
```java
package com.banco.digital.entity;

import com.banco.digital.enums.StatusEmprestimo;
import jakarta.persistence.*;
import lombok.*;

import java.math.BigDecimal;

@Entity
@Table(name = "emprestimos")
@Getter @Setter @Builder
@NoArgsConstructor @AllArgsConstructor
public class Emprestimo {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name="conta_id", nullable=false)
    private Conta conta;

    @Column(nullable=false)
    private BigDecimal valor;

    @Column(nullable=false)
    private Integer parcelas;

    @Column(nullable=false)
    private Double juros; // 1% ao mês

    @Enumerated(EnumType.STRING)
    @Column(nullable=false)
    private StatusEmprestimo status;
}
```

---

## ENUMS

### `src/main/java/com/banco/digital/enums/StatusCliente.java`
```java
package com.banco.digital.enums;

public enum StatusCliente {
    PENDENTE, APROVADO, REPROVADO
}
```

---

### `src/main/java/com/banco/digital/enums/StatusEmprestimo.java`
```java
package com.banco.digital.enums;

public enum StatusEmprestimo {
    PENDENTE, APROVADO, RECUSADO, FINALIZADO
}
```

---

## DTOS

### `src/main/java/com/banco/digital/dto/ClienteDTO.java`
```java
package com.banco.digital.dto;

import com.banco.digital.enums.StatusCliente;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;
import lombok.*;

import java.time.LocalDate;

@Getter @Setter @Builder
@NoArgsConstructor @AllArgsConstructor
public class ClienteDTO {
    @Schema(description = "Nome do cliente", example = "João da Silva")
    @NotBlank
    private String nome;

    @Schema(description = "CPF", example = "123.456.789-10")
    @Pattern(regexp="\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}", message = "Formato de CPF inválido")
    private String cpf;

    @Schema(description = "E-mail de contato", example = "joao@email.com")
    @Email
    @NotBlank
    private String email;

    @Schema(description = "Telefone", example = "(11) 91234-5678")
    @NotBlank
    private String telefone;

    @Schema(description = "Endereço", example = "Rua das Acácias, 123")
    @NotBlank
    private String endereco;

    @Schema(description = "Data de nascimento", example = "1990-05-03")
    @NotNull
    private LocalDate dataNascimento;

    @Schema(description = "Status do cliente", example = "PENDENTE")
    private StatusCliente status;
}
```

---

### `src/main/java/com/banco/digital/dto/EmprestimoDTO.java`
```java
package com.banco.digital.dto;

import com.banco.digital.enums.StatusEmprestimo;
import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.*;
import lombok.*;

@Getter @Setter @Builder
@NoArgsConstructor @AllArgsConstructor
public class EmprestimoDTO {
    @Schema(description = "Valor solicitado", example = "5000.0")
    @NotNull @Min(1) @Max(10000)
    private Double valor;

    @Schema(description = "Parcelas", example = "10")
    @NotNull @Min(1) @Max(24)
    private Integer parcelas;

    @Schema(description = "Status", example = "PENDENTE")
    private StatusEmprestimo status;
}
```

---

### `src/main/java/com/banco/digital/dto/LoginDTO.java`
```java
package com.banco.digital.dto;

import io.swagger.v3.oas.annotations.media.Schema;
import jakarta.validation.constraints.NotBlank;
import lombok.*;

@Getter @Setter @Builder
@NoArgsConstructor @AllArgsConstructor
public class LoginDTO {
    @Schema(description = "Login ou e-mail", example = "gerente1 ou cliente@email.com")
    @NotBlank
    private String login;

    @Schema(description = "Senha", example = "123456")
    @NotBlank
    private String senha;
}
```

---

---

## REPOSITORIES

### `src/main/java/com/banco/digital/repository/ClienteRepository.java`
```java
package com.banco.digital.repository;

import com.banco.digital.entity.Cliente;
import com.banco.digital.enums.StatusCliente;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;
import java.util.List;

public interface ClienteRepository extends JpaRepository<Cliente, Long> {
    Optional<Cliente> findByCpf(String cpf);
    Optional<Cliente> findByEmail(String email);
    List<Cliente> findByStatus(StatusCliente status);
}
```

---

### `src/main/java/com/banco/digital/repository/GerenteRepository.java`
```java
package com.banco.digital.repository;

import com.banco.digital.entity.Gerente;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface GerenteRepository extends JpaRepository<Gerente, Long> {
    Optional<Gerente> findByLogin(String login);
}
```

---

### `src/main/java/com/banco/digital/repository/ContaRepository.java`
```java
package com.banco.digital.repository;

import com.banco.digital.entity.Conta;
import com.banco.digital.entity.Cliente;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.Optional;

public interface ContaRepository extends JpaRepository<Conta, Long> {
    Optional<Conta> findByCliente(Cliente cliente);
}
```

---

### `src/main/java/com/banco/digital/repository/EmprestimoRepository.java`
```java
package com.banco.digital.repository;

import com.banco.digital.entity.Emprestimo;
import com.banco.digital.entity.Conta;
import com.banco.digital.enums.StatusEmprestimo;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface EmprestimoRepository extends JpaRepository<Emprestimo, Long> {
    List<Emprestimo> findByContaAndStatus(Conta conta, StatusEmprestimo status);
    List<Emprestimo> findByConta(Conta conta);
}
```

---

---

## SECURITY

### `src/main/java/com/banco/digital/security/JwtTokenProvider.java`
```java
package com.banco