Claro! Segue um projeto Angular 16 para um sistema bancário digital, conforme todas suas especificações. O código é extenso, então cada arquivo prioritário/já estruturado é mostrado com exemplos completos e comentários, simulando um projeto real e pronto para uso.

---

# **1. `package.json`**

```json
{
  "name": "banco-digital",
  "version": "1.0.0",
  "scripts": {
    "ng": "ng",
    "start": "ng serve --open",
    "build": "ng build",
    "test": "ng test",
    "lint": "ng lint",
    "e2e": "ng e2e"
  },
  "private": true,
  "dependencies": {
    "@angular/animations": "^16.0.0",
    "@angular/cdk": "^16.0.0",
    "@angular/common": "^16.0.0",
    "@angular/compiler": "^16.0.0",
    "@angular/core": "^16.0.0",
    "@angular/forms": "^16.0.0",
    "@angular/material": "^16.0.0",
    "@angular/platform-browser": "^16.0.0",
    "@angular/platform-browser-dynamic": "^16.0.0",
    "@angular/router": "^16.0.0",
    "rxjs": "^7.8.0",
    "tslib": "^2.6.0",
    "zone.js": "~0.13.0",
    "bootstrap": "^5.3.0",
    "ngx-mask": "^15.0.0"
  },
  "devDependencies": {
    "@angular-devkit/build-angular": "^16.0.0",
    "@angular/cli": "^16.0.0",
    "@angular/compiler-cli": "^16.0.0",
    "@types/node": "^20.0.0",
    "typescript": "~5.2.0"
  }
}
```

---

# **2. `angular.json`**

```json
{
  "$schema": "./node_modules/@angular/cli/lib/config/schema.json",
  "version": 1,
  "projects": {
    "banco-digital": {
      "projectType": "application",
      "schematics": {},
      "root": "",
      "sourceRoot": "src",
      "prefix": "app",
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:browser",
          "options": {
            "outputPath": "dist/banco-digital",
            "index": "src/index.html",
            "main": "src/main.ts",
            "polyfills": ["zone.js"],
            "tsConfig": "tsconfig.app.json",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css",
              "node_modules/@angular/material/prebuilt-themes/indigo-pink.css"
            ],
            "scripts": [
            ]
          },
          "configurations": {
            "production": {
              "fileReplacements": [
                {
                  "replace": "src/environments/environment.ts",
                  "with": "src/environments/environment.prod.ts"
                }
              ],
              "optimization": true,
              "outputHashing": "all",
              "sourceMap": false,
              "extractCss": true,
              "namedChunks": false,
              "vendorChunk": false,
              "buildOptimizer": true,
              "budgets": [
                {
                  "type": "initial",
                  "maximumWarning": "2mb",
                  "maximumError": "5mb"
                }
              ]
            }
          }
        },
        "serve": {
          "builder": "@angular-devkit/build-angular:dev-server",
          "options": {
            "browserTarget": "banco-digital:build"
          },
          "configurations": {
            "production": {
              "browserTarget": "banco-digital:build:production"
            }
          }
        },
        "test": {
          "builder": "@angular-devkit/build-angular:karma",
          "options": {
            "main": "src/test.ts",
            "polyfills": ["zone.js"],
            "tsConfig": "tsconfig.spec.json",
            "karmaConfig": "karma.conf.js",
            "assets": [
              "src/favicon.ico",
              "src/assets"
            ],
            "styles": [
              "node_modules/bootstrap/dist/css/bootstrap.min.css",
              "src/styles.css"
            ],
            "scripts": []
          }
        }
      }
    }
  },
  "defaultProject": "banco-digital"
}
```

---

# **3. `tsconfig.json`**

```json
{
  "compileOnSave": false,
  "compilerOptions": {
    "baseUrl": "./",
    "outDir": "./dist/out-tsc",
    "sourceMap": true,
    "declaration": false,
    "module": "esnext",
    "moduleResolution": "node",
    "emitDecoratorMetadata": true,
    "experimentalDecorators": true,
    "target": "es2022",
    "typeRoots": [
      "node_modules/@types"
    ],
    "lib": [
      "es2022",
      "dom"
    ]
  }
}
```

---

# **4. `src/environments/environment.ts`**

```typescript
export const environment = {
  production: false,
  apiUrl: 'http://localhost:3000/api' // Troque para o endpoint real do backend
};
```

---

# **5. `src/styles.css`**

```css
/* Estilo padrão + Material/Bootstrap + customização corporativa */
body {
  background: #f7fafd;
  font-family: 'Roboto', Arial, Helvetica, sans-serif;
  color: #21374a;
}

/* Azul corporativo */
:root {
  --banco-blue: #064789;
  --banco-light-blue: #e9f0fa;
  --banco-white: #fff;
  --banco-gray: #f2f2f2;
}

/* Material override examples */
.mat-toolbar {
  background: var(--banco-blue) !important;
  color: #fff !important;
}

/* Main container responsiveness */
.container-main {
  padding: 25px 10px;
  max-width: 480px;
  margin: auto;
  background: var(--banco-white);
  border-radius: 8px;
  box-shadow: 0 6px 38px rgba(20,50,110,0.07);
}

/* Responsividade para telas pequenas */
@media (max-width: 600px) {
  .container-main {
    border-radius: 0;
    box-shadow: none;
    min-width: auto;
    max-width: none;
  }
}
```

---

# **6. `src/index.html`**

```html
<!doctype html>
<html lang="pt-br">
<head>
  <meta charset="utf-8">
  <title>Banco Digital</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/png" href="assets/favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>
```

---

# **7. `src/app/app.module.ts`**

```typescript
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';
import { ReactiveFormsModule } from '@angular/forms';

import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { MatToolbarModule } from '@angular/material/toolbar';
import { MatIconModule } from '@angular/material/icon';
import { MatButtonModule } from '@angular/material/button';
import { MatInputModule } from '@angular/material/input';
import { MatCardModule } from '@angular/material/card';
import { MatListModule } from '@angular/material/list';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatMenuModule } from '@angular/material/menu';
import { MatDialogModule } from '@angular/material/dialog';
import { MatTableModule } from '@angular/material/table';
import { MatSelectModule } from '@angular/material/select';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';

import { AuthService } from './services/auth.service';
import { ClienteService } from './services/cliente.service';
import { ContaService } from './services/conta.service';
import { EmprestimoService } from './services/emprestimo.service';

import { AuthGuard } from './guards/auth.guard';
import { RoleGuard } from './guards/role.guard';

import { AuthInterceptor } from './interceptors/auth.interceptor';

import { LoginComponent } from './components/login/login.component';
import { CadastroClienteComponent } from './components/cadastro-cliente/cadastro-cliente.component';
import { DashboardClienteComponent } from './components/dashboard-cliente/dashboard-cliente.component';
import { SolicitarEmprestimoComponent } from './components/solicitar-emprestimo/solicitar-emprestimo.component';
import { DashboardGerenteComponent } from './components/dashboard-gerente/dashboard-gerente.component';

import { NgxMaskModule } from 'ngx-mask';

/**
 * Módulo principal, importando Angular Material, Rotas, Components, Serviços, Guards etc.
 */
@NgModule({
  declarations: [
    AppComponent,
    LoginComponent,
    CadastroClienteComponent,
    DashboardClienteComponent,
    SolicitarEmprestimoComponent,
    DashboardGerenteComponent,
  ],
  imports: [
    BrowserModule,
    HttpClientModule,
    ReactiveFormsModule,
    BrowserAnimationsModule,
    MatToolbarModule,
    MatIconModule,
    MatButtonModule,
    MatInputModule,
    MatCardModule,
    MatListModule,
    MatSnackBarModule,
    MatProgressSpinnerModule,
    MatMenuModule,
    MatDialogModule,
    MatTableModule,
    MatSelectModule,
    AppRoutingModule,
    NgxMaskModule.forRoot()
  ],
  providers: [
    AuthService,
    ClienteService,
    ContaService,
    EmprestimoService,
    AuthGuard,
    RoleGuard,
    // Interceptor JWT
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true }
  ],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

---

# **8. `src/app/app-routing.module.ts`**

```typescript
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

import { LoginComponent } from './components/login/login.component';
import { DashboardClienteComponent } from './components/dashboard-cliente/dashboard-cliente.component';
import { CadastroClienteComponent } from './components/cadastro-cliente/cadastro-cliente.component';
import { SolicitarEmprestimoComponent } from './components/solicitar-emprestimo/solicitar-emprestimo.component';
import { DashboardGerenteComponent } from './components/dashboard-gerente/dashboard-gerente.component';

import { AuthGuard } from './guards/auth.guard';
import { RoleGuard } from './guards/role.guard';

/**
 * Definição das rotas principais do sistema
 * Todas rotas com canActivate para proteger acesso
 */
const routes: Routes = [
  { path: 'login', component: LoginComponent },
  { path: 'cadastro', component: CadastroClienteComponent },
  {
    path: 'cliente',
    canActivate: [AuthGuard, RoleGuard],
    data: { roles: ['CLIENTE'] },
    children: [
      { path: '', component: DashboardClienteComponent },
      { path: 'emprestimo', component: SolicitarEmprestimoComponent }
    ],
  },
  {
    path: 'gerente',
    canActivate: [AuthGuard, RoleGuard],
    data: { roles: ['GERENTE'] },
    component: DashboardGerenteComponent,
  },
  { path: '', redirectTo: '/login', pathMatch: 'full' },
  { path: '**', redirectTo: '/login' }
];

@NgModule({
  imports: [RouterModule.forRoot(routes, {scrollPositionRestoration: 'enabled'})],
  exports: [RouterModule]
})
export class AppRoutingModule { }
```

---

# **9. `src/app/models/cliente.model.ts`**

```typescript
/** Modelo de Cliente */
export interface Cliente {
  id?: number;
  nome: string;
  cpf: string;
  email: string;
  telefone: string;
  endereco: string;
  dataNascimento: string;
  aprovado?: boolean;
  status?: 'PENDENTE' | 'APROVADO' | 'REPROVADO';
}
```

---

# **10. `src/app/models/emprestimo.model.ts`**

```typescript
export interface Emprestimo {
  id?: number;
  clienteId: number;
  valor: number;
  parcelas: number;
  taxaJuros: number;
  status: 'PENDENTE' | 'APROVADO' | 'REPROVADO' | 'QUITADO';
  dataSolicitacao: string;
  parcelasDetalhe?: Parcela[];
}

export interface Parcela {
  numero: number;
  valor: number;
  dataVencimento: string;
  paga: boolean;
}
```

---

# **11. `src/app/models/conta.model.ts`**

```typescript
export interface Conta {
  id?: number;
  clienteId: number;
  saldo: number;
  numeroConta: string;
  transacoes: Transacao[];
}

export interface Transacao {
  id: number;
  data: string;
  descricao: string;
  valor: number;
  tipo: 'ENTRADA' | 'SAIDA';
}
```

---

# **12. `src/app/services/auth.service.ts`**

```typescript
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { BehaviorSubject, Observable, catchError, throwError, tap } from 'rxjs';
import { Router } from '@angular/router';
import { environment } from '../../environments/environment';

interface LoginResponse {
  token: string;
  role: 'CLIENTE' | 'GERENTE';
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {

  private jwtTokenKey = 'banco_token';
  private userRoleKey = 'banco_role';
  private loggedIn = new BehaviorSubject<boolean>(this.hasToken());

  constructor(
    private http: HttpClient,
    private router: Router
  ) { }

  login(email: string, senha: string): Observable<LoginResponse> {
    return this.http.post<LoginResponse>(`${environment.apiUrl}/auth/login`, { email, senha })
      .pipe(
        tap(resp => {
          // Armazena o token e o role no localStorage
          localStorage.setItem(this.jwtTokenKey, resp.token);
          localStorage.setItem(this.userRoleKey, resp.role);
          this.loggedIn.next(true);
        }),
        catchError(this.handleError)
      );
  }

  logout() {
    localStorage.removeItem(this.jwtTokenKey);
    localStorage.removeItem(this.userRoleKey);
    this.loggedIn.next(false);
    this.router.navigate(['/login']);
  }

  isLoggedIn(): Observable<boolean> {
    return this.loggedIn.asObservable();
  }

  getRole(): 'CLIENTE' | 'GERENTE' | null {
    return localStorage.getItem(this.userRoleKey) as any;
  }

  getToken(): string | null {
    return localStorage.getItem(this.jwtTokenKey);
  }

  hasToken(): boolean {
    return !!this.getToken();
  }

  /** Verifica se token expirou (exemplo básico, use JWT lib na prática!) */
  isTokenExpired(): boolean {
    const token = this.getToken();
    if (!token) return true;
    try {
      const [, payload,] = token.split('.');
      const decoded = JSON.parse(atob(payload));
      return decoded.exp * 1000 < Date.now();
    } catch {
      return true;
    }
  }

  private handleError(error: HttpErrorResponse) {
    let msg = 'Erro desconhecido no login.';
    if (error.status === 401) { msg = 'Usuário ou senha inválidos.'; }
    if (error.error?.message) { msg = error.error.message; }
    return throwError(() => new Error(msg));
  }
}
```

---

# **13. `src/app/services/cliente.service.ts`**

```typescript
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Cliente } from '../models/cliente.model';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class ClienteService {

  private api = `${environment.apiUrl}/clientes`;

  constructor(private http: HttpClient) { }

  cadastrar(cliente: Cliente): Observable<Cliente> {
    return this.http.post<Cliente>(`${this.api}/cadastro`, cliente)
      .pipe(catchError(this.handleError));
  }

  listarPendentes(): Observable<Cliente[]> {
    return this.http.get<Cliente[]>(`${this.api}?status=PENDENTE`)
      .pipe(catchError(this.handleError));
  }

  aprovar(clienteId: number): Observable<any> {
    return this.http.post(`${this.api}/${clienteId}/aprovar`, null)
      .pipe(catchError(this.handleError));
  }

  reprovar(clienteId: number): Observable<any> {
    return this.http.post(`${this.api}/${clienteId}/reprovar`, null)
      .pipe(catchError(this.handleError));
  }

  getById(clienteId: number): Observable<Cliente> {
    return this.http.get<Cliente>(`${this.api}/${clienteId}`)
      .pipe(catchError(this.handleError));
  }

  private handleError(error: HttpErrorResponse) {
    let msg = 'Erro ao processar requisição de clientes.';
    if (error.error?.message) { msg = error.error.message; }
    return throwError(() => new Error(msg));
  }
}
```

---

# **14. `src/app/services/conta.service.ts`**

```typescript
import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Conta } from '../models/conta.model';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn